---
title: "Classifying Fish with Fastai and ipywidgets"
author: "Lindy Rauchenstein"
date: "2025-02-04"
categories: [code, analysis]
image: "angelfish.jpg"
toc: true
format:
  html:
    code-fold: true
    code-tools: true
    ipywidgets: embed
    embed-resources: true
---
Welcome, curious minds! Today, we’re going to build something cool: a simple fish classifier using Fastai and ipywidgets. Imagine you’re out fishing, and you catch something. Instead of scratching your head and wondering what it is, you can snap a photo, upload it here, and let our model tell you if it’s a reef fish, deepwater fish, or freshwater fish. Sound fun? Let’s dive in!

![Angelfish live on coral reefs.](angelfish.jpg)

## Setting Up the Environment

First things first, we need to make sure we’re running this in the right environment. If you’re using the fastbook mamba environment, you’re good to go. If not, get that set up first.

```{python}
from fastai.vision.widgets import FileUpload, Button, Output, Label, VBox
from fastai.vision.core import *
from fastbook import *
```

Here, we’re bringing in some tools from Fastai to help us build our classifier. These widgets will make it super easy for us to upload images and get predictions.

## Creating the Upload and Button Widgets

Now, we need a way for users (that’s you!) to interact with our classifier. We’ll create an upload button where you can drop your fish image, and a classification button to get results.

```{python}
btn_upload = widgets.FileUpload()
btn_run = widgets.Button(description='Classify')
out_pl = widgets.Output()
lbl_pred = widgets.Label()
```

This is like setting up a little machine that takes in your image and spits out a prediction. The btn_upload is where you drop the image, btn_run is the button you press, out_pl is where we display the image, and lbl_pred will tell you what type of fish you’ve got.

## Loading the Pre-Trained Model

Now comes the real magic. We’re going to load our fish classifier model, which has already been trained and saved as export.pkl.

```{python}
learn_inf = load_learner('export.pkl')
```

Think of this like a super-smart brain that has seen thousands of fish before and can now recognize them just by looking at a picture.

## Writing the Classification Function

We need a function that tells our model to look at the uploaded image and predict the type of fish.

```{python}
def on_click_classify(change):
    out_pl.clear_output()
    img = PILImage.create(btn_upload.value[0].content.tobytes())
    with out_pl: display(img.to_thumb(128,128))
    pred, pred_idx, probs = learn_inf.predict(img)
    lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'
```

Here’s what happens step by step:

1. We clear any previous output.
2. We grab the image you uploaded.
3. We show a small thumbnail preview of your fish.
4. We pass the image through our smart model.
5. The model tells us what kind of fish it is and how confident it is about the prediction.

## Connecting the Button to the Function

Now, we make sure that when you click the button, our function runs.

```{python}
btn_run.on_click(on_click_classify)
```

This tells the button: "Hey, whenever someone clicks you, go and classify that fish!"

## Displaying the Final Interface

Now we put everything together into a nice interface that anyone can use.

```{python}
VBox([widgets.Label('Select your fish!'),
      btn_upload, btn_run, out_pl, lbl_pred])
```

This arranges everything neatly on the screen so that users can easily upload their fish picture, click a button, and get an answer.

## That’s It!

Congratulations, you’ve built a working fish classifier! Now, go ahead and test it. Upload an image of a fish and let the model do its thing.

Want to improve it? You could train the model on more fish species, add a confidence bar, or even build a mobile app version!

Keep exploring, keep learning, and most importantly—have fun!